---
- name: Ensure required tools are installed
  package:
    name:
      - tar
    state: present

- name: Create temp install directory
  file:
    path: "{{ tomcat_temp_install_dir }}"
    state: directory
    mode: '0644'

- name: Create tomcat group
  group:
    name: "{{ tomcat_group }}"
    state: present
    
- name: Create tomcat user
  user:
    name: "{{ tomcat_user }}"
    group: "{{ tomcat_group }}"
    home: "{{ tomcat_symlink }}"
    shell: /bin/false
    create_home: no
    state: present

- name: Download Tomcat archive
  get_url:
    url: "{{ desired_tomcat.public_download_url }}"
    dest: "{{ tomcat_temp_install_dir }}"

- name: Copy tomcat install assets
  copy:
    src: "{{ item }}"
    dest: "{{ tomcat_temp_install_dir }}/{{ item }}"
    mode: '0644'
  with_items:
    - install.sh
    - "{{ tomcat_service_file }}"

- name: Make install script executable
  file:
    path: "{{tomcat_temp_install_dir}}/install.sh"
    mode: '0755'

- name: Remove existing Tomcat version (on force reinstall)
  file:
    path: "{{ tomcat_install_dir}}/{{ tomcat_dir_name }}"
    state: absent
  when: tomcat_force_reinstall

- name: Install tomcat if requested
  shell: "{{ tomcat_temp_install_dir }}/install.sh > /tmp/tomcat_install_log.txt"
  args:
    # creates: /usr/share/
    chdir: "{{ tomcat_temp_install_dir }}"
  environment:
    TOMCAT_ARCHIVE: "{{ desired_tomcat.archive_name }}"
    TOMCAT_INSTALL_LOCATION: "{{ tomcat_install_dir }}"
    TOMCAT_SYS_HOME: "{{ tomcat_symlink }}"
    TOMCAT_DIR_NAME: "{{ desired_tomcat.tomcat_name }}"
    TOMCAT_SERVICE_FILE: "{{ tomcat_service_file }}"
  notify: restart tomcat

# - name: Ensure tomcat is started and enabled
#   service:
#     name: "{{ tomcat_service_name }}"
#     state: restarted
#     enabled: true

- name: Clean up temp directory
  file:
    path: "{{ tomcat_temp_install_dir }}"
    state: absent
    mode: '0644'

- name: Find old tomcats
  find:
    paths: "{{ tomcat_install_dir }}"
    patterns: "apache-tomcat-*"
    file_type: directory
  register: tomcat_dirs

- name: Remove old Tomcat versions
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ tomcat_dirs.files }}"
  when: item.path != (tomcat_install_dir + '/' + desired_tomcat.tomcat_name)
  become: true